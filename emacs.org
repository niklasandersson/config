#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el
* Setup Instructions
** Additional Icons
*** Linux
- Run the following command once in Emacs: =M-x nerd-icons-install-fonts=.
- This will download and install several Nerd Fonts into '~/.local/share/fonts/'.
- If the fonts do not show up immediately, you may need to refresh the system font cache. In a
  terminal, run: =fc-cache -fv=.
- Restart Emacs and your system if necessary.

*** Windows
- Run the following command once in Emacs: =M-x nerd-icons-install-fonts=.
- After that, open the following folder in Windows Explorer:
  =C:\Users\<YourUsername>\.emacs.d\.local\share\fonts=.
- Select all .ttf files and press “Install” or “Install for all users”.
- Once installed, restart Emacs to see the icons displayed correctly.

** Spell Check
Follow these steps to install and configure Aspell so that Emacs can use it for spell checking
with Flyspell.
*** Linux
Use your system's package manager to install aspell and the dictionaries you need (aspell-en, aspell-sv).

*** Windows
- Download and install MSYS2 from the official website: [[https://www.msys2.org/][msys2.org]]. Make sure to
  follow the installation and update instructions on their site  (run pacman
  -Syu after installation).
- Open the MSYS2 MSYS terminal (not MinGW), and install Aspell and make by running:
  =pacman -S aspell make=.
- Visit the GNU Aspell dictionary download page:
  [[https://ftp.gnu.org/gnu/aspell/dict/0index.html#0.60]] and download required dictionaries.
- Extract the downloaded .tar.bz2 file to a folder in MSYS2.
- Open an MSYS2 terminal, cd into the unpacked dictionary folder, and run:
  #+begin_src sh
    ./configure
    make
    make install
  #+end_src
- Make sure the variables =my/ispell-program-name=, =my/ispell-aspell-data-dir= and
  =my/ispell-aspell-dict-dir= are set correctly (externally loaded).

* Global Variables
We declare and define all globally used variables here so we are sure that they are available
throughout the config.
#+begin_src emacs-lisp
  (defvar my/home-directory
    (cond ((eq system-type 'windows-nt) (format "c:/Users/%s/" user-login-name))
          (t "~/")))

  (defvar my/default-font-size 120)
  (defvar my/default-font-size-variable-pitch 120)

  (defvar my/config-filename
    (format "%sProjects/config/emacs.org" my/home-directory))
#+end_src

Some variables are system specific or to sensitive to keep in version control so
we load them from an external file.
#+begin_src emacs-lisp
  (load "~/.emacs.d/lisp/external_variables.el")
#+end_src

* Default Behaviour
** Setup Packages
Here we add all archives that we install packages from and make sure that =use-package= is available.
#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("elpa" . "https://elpa.gnu.org/packages/")
                           ("nongnu" . "https://elpa.nongnu.org/nongnu/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

** Character Encoding
Ensure consistent UTF-8 encoding across Emacs, including files, terminal,
clipboard, and internal operations. Use "C" locale to avoid localized weekday/month names in timestamps.
#+begin_src emacs-lisp
  (set-language-environment 'utf-8)
  (setq locale-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-selection-coding-system
   (if (eq system-type 'windows-nt)
       'utf-16-le
     'utf-8))
  (prefer-coding-system 'utf-8)

  (setq system-time-locale "C")
#+end_src

** Starting Directory
Make Emacs start in the users home directory.
#+begin_src emacs-lisp
  (cd my/home-directory)
#+end_src

** Custom File
Set default location of file used for storing customization information.
#+begin_src emacs-lisp
  (setq custom-file "~/.emacs.d/emacs-custom.el")
  (load custom-file)
#+end_src

** Backup Files
Set default locations for backup files.
#+begin_src emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+end_src

** Text Handling
Enable all text handling features that should be default for all buffers.
#+begin_src emacs-lisp
  (delete-selection-mode 1)
  (electric-pair-mode 1)
  (show-paren-mode 1)
  (add-hook 'before-save-hook #'delete-trailing-whitespace)
#+end_src

** Navigation and Minibuffer Completion
In this section we configure Ivy, Counsel, and Ivy-Rich to replace Emacs' default interface for executing commands, opening files, switching buffers, and searching text.
#+begin_src emacs-lisp
  (recentf-mode 1)

  (use-package ivy
    :ensure t
    :diminish
    :defer 0
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done))

    :custom
    (ivy-initial-inputs-alist nil)

    :config
    (ivy-mode 1)
    (setcdr (assq t ivy-format-functions-alist)
            #'ivy-format-function-line))

  (use-package counsel
    :ensure t
    :after ivy
    :defer 0
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-buffer-or-recentf)
           ("C-x C-b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file))
    :custom
    (counsel-find-file-at-point t))

  (use-package ivy-rich
    :ensure t
    :after ivy
    :config
    (ivy-rich-mode 1))

  (use-package which-key
    :ensure t
    :diminish
    :defer 0
    :config
    (which-key-mode 1))
#+end_src

Avy is used to quickly jump around the visible part of a buffer.
#+Begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind ("C-'" . avy-goto-char-2))
#+end_src

With =ace-window= we can easily jump between multiple windows and mange the layout
of our frames. =winner-mode= gives us the ability to undo and redo windows layouts.
#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :bind (("M-o" . ace-window))

    :custom
    (aw-background nil)
    (aw-dispatch-always t)

    :config
    (set-face-attribute 'aw-leading-char-face nil
      		      :height (+ my/default-font-size 20)))
  (defvar aw-dispatch-alist
    '((?x aw-delete-window "Delete Window")
      (?m aw-swap-window "Swap Windows")
      (?M aw-move-window "Move Window")
      (?c aw-copy-window "Copy Window")
      (?j aw-switch-buffer-in-window "Select Buffer")
      (?n aw-flip-window)
      (?u aw-switch-buffer-other-window "Switch Buffer Other Window")
      (?c aw-split-window-fair "Split Fair Window")
      (?- aw-split-window-vert "Split Vert Window")
      (?/ aw-split-window-horz "Split Horz Window")
      (?o delete-other-windows "Delete Other Windows")
      (?? aw-show-dispatch-help))
    "List of actions for `aw-dispatch-default'.")

  (winner-mode 1)
#+end_src

** Help System
This section replaces and extends the help system with the helpful package which
provides more informative and interactive help buffers.
#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :defer t
    :after counsel

    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key)

    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable))
#+end_src

** Spell Check
This code enables automatic spell checking in selected modes. Setup is a bit
tricky on Windows and requires an MSYS2 installation for access to aspell.
#+begin_src emacs-lisp
  (when (eq system-type 'windows-nt)
    (setq ispell-program-name my/ispell-program-name)
    (setq ispell-aspell-data-dir my/ispell-aspell-data-dir)
    (setq ispell-aspell-dict-dir my/ispell-aspell-dict-dir))

  (setq ispell-local-dictionary "sv")

  (defun my/set-flyspell-language-for-config ()
    "Use English dictionary for spell checking when editing the config file."
    (when (and (buffer-file-name)
               (string-equal (file-truename (buffer-file-name))
                             (file-truename
          		    (expand-file-name my/config-filename))))
      (ispell-change-dictionary "en")))

  (defun my/flyspell-theme-setup ()
    (set-face-attribute 'flyspell-incorrect nil
                        :underline nil :foreground "#d64930")
    (set-face-attribute 'flyspell-duplicate nil
                        :underline nil :foreground "#fabd2f"))

  (use-package flyspell
    :hook ((org-mode . flyspell-mode)
    	 (git-commit-setup . git-commit-turn-on-flyspell)
    	 (flyspell-mode . my/set-flyspell-language-for-config)
    	 (flyspell-mode . my/flyspell-theme-setup))

    :custom
    (flyspell-issue-message-flag nil))

  (use-package flyspell-correct
    :ensure t
    :after flyspell
    :bind (:map flyspell-mode-map ("C-c s" . flyspell-correct-wrapper)))

  (use-package flyspell-correct-ivy
    :ensure t
    :after flyspell-correct)
#+end_src
* GUI Configuration
** Basic GUI elements
Emacs has a lot of unwanted GUI elements that we need to disable.
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
  (setq visible-bell t)
  (setq ring-bell-function 'ignore)
  (setq use-dialog-box nil)
#+end_src

We also need to configure some basic GUI elements that we want to apply for all buffers.
#+begin_src emacs-lisp
  (setq-default cursor-type 'bar)
  (set-fringe-mode 10)
  (setq-default display-line-numbers-width 4)
  (setq-default display-fill-column-indicator-column 80)
  (setq-default display-fill-column-indicator-character ?¦)
#+end_src

** Theme
Enable a nice looking theme. Some themes have an contrasting background color
for the fringes. We set the fringe and line number backgrounds to the default
background so that they blend in with the rest of the frame.
#+begin_src emacs-lisp
  (use-package gruvbox-theme :ensure t)
  (load-theme 'gruvbox-dark-hard t)
#+end_src

** Fonts
We set one fixed-width and one variable-width font to be used in different modes. Modes like
org-mode will use both.
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
  		    :family "mononoki"
  		    :height my/default-font-size)
  (set-face-attribute 'fixed-pitch nil
  		    :family "mononoki"
  		    :height my/default-font-size)
  (set-face-attribute 'variable-pitch nil
  		    :family "Noto Serif"
  		    :height my/default-font-size-variable-pitch)
#+end_src

** Additional Icons
Some packages, such as doom-modeline, uses additional icons for certain
elements. We make them available trough the package =nerd-icons=.
#+begin_src emacs-lisp
  (use-package nerd-icons
    :ensure t
    :defer t)
#+end_src

** Mode Line
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :defer t
    :custom
    (doom-modeline-buffer-encoding nil)
    (doom-modeline-position-line-format nil)
    (doom-modeline-position-column-format nil)

    :config (doom-modeline-mode 1))

  (run-at-time "0.5 sec" nil #'doom-modeline-mode)
#+end_src

** Calendar
We make sure that Monday is the first day of the week in the calendar by setting
=calendar-week-start-day= to 1.
#+begin_src emacs-lisp
  (setq calendar-week-start-day 1)
#+end_src

Here we add week numbers to the calendar view.
*Credit:* Tommy
*Source:* [[https://stackoverflow.com/questions/21364948/how-to-align-the-calendar-with-week-number-as-the-intermonth-text][Stack Overflow]]
#+begin_src emacs-lisp
  (copy-face font-lock-constant-face 'calendar-iso-week-face)
  (set-face-attribute 'calendar-iso-week-face nil :height 0.7)

  (setq calendar-intermonth-text
        '(propertize
  	(format "%2d" (car (calendar-iso-from-absolute
  			    (calendar-absolute-from-gregorian
  			     (list month day year)))))
  	'font-lock-face 'calendar-iso-week-face))

  (copy-face 'default 'calendar-iso-week-header-face)
  (set-face-attribute 'calendar-iso-week-header-face nil :height 0.7)

  (setq calendar-intermonth-header
        (propertize "Wk" 'font-lock-face 'calendar-iso-week-header-face))
#+end_src

* Writing
** Page Layout
We want the line length to be limited to 80 characters when in a text
mode. =auto-fill-mode= ensures that Emacs automatically breaks lines over this
limit. =olivetti-mode= is used to center the page in the window.
#+begin_src emacs-lisp
  (defun my/text-mode-setup ()
    "Set `fill-column` to 80 and enable automatic line breaking in text buffers."
    (setq-local fill-column 80)
    (auto-fill-mode 1))

  (add-hook 'text-mode-hook #'my/text-mode-setup)

  (use-package olivetti
    :ensure t
    :defer t
    :hook (text-mode . olivetti-mode))
#+end_src

** Org Mode
Org-mode has a lot of options to configure. We separate the config into multiple
functions that we can call as hooks to org-mode. First we define our font setup for org-mode.
#+begin_src emacs-lisp
  (defun my/org-font-setup ()
    "Customize Org mode font faces for improved readability.

    Sets custom fonts, sizes, and styles for Org headings and fixed-pitch
    elements. Headings from level 1 to 8 are displayed in the 'Spectral' font
    with varying sizes and bold weight. Code blocks, tables, and metadata lines
    are rendered in a fixed-pitch font for better alignment. Also sets a dimmer
    foreground color for completed tasks and headlines marked as DONE."

    (dolist (face '((org-level-1 . 1.3)
                    (org-level-2 . 1.2)
                    (org-level-3 . 1.1)
                    (org-level-4 . 1.1)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil
                          :family "Spectral"
                          :weight 'bold
                          :box nil
                          :height (cdr face)
                          :foreground "#ebdbb2"))

    (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-block nil :inherit 'fixed-pitch :background nil)
    (set-face-attribute 'org-meta-line nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-verbatim nil :inherit 'fixed-pitch)

    (set-face-attribute 'org-headline-done nil
                        :foreground "#7c6f64")
    (set-face-attribute 'org-done nil
                        :foreground "#7c6f64"))
#+end_src

When working with src-blocks in org mode it is useful to automatically indent the code on each save.
#+begin_src emacs-lisp
  (defun my/indent-org-block-on-save ()
    "Automatically indent the current Org source block before saving.

    If point is inside a source block (`#+BEGIN_SRC ... #+END_SRC`)
    re-indent the block using `org-indent-block`. Intended to be used
    as a buffer-local `before-save-hook` in Org mode."
    (when (org-in-src-block-p)
      (org-indent-block)))

  (defun my/add-org-block-indent-save-hook ()
    "Add buffer-local before-save hook for org-block indentation."
    (add-hook 'before-save-hook #'my/indent-org-block-on-save nil t))
#+end_src

In all buffers we use electric-pair-mode to automatically match a closing
parenthesis whenever we type an opening parenthesis. This also works on < which
is a problem in org-mode since we use that for org-tempo templates. This code disables electric-pair-mode for < and enables it via a hook to org-mode.
#+begin_src emacs-lisp
  (defun my/inhibit-electric-pair-in-org-mode (char)
    "Prevent `electric-pair-mode` from pairing <"
    (if (char-equal char ?<) t
      (funcall (default-value 'electric-pair-inhibit-predicate) char)))

  (defun my/org-mode-electric-pair-setup ()
    "Set buffer-local pairing rules for Org mode."
    (setq-local
     electric-pair-inhibit-predicate #'my/inhibit-electric-pair-in-org-mode))
#+end_src

This code is only executed when working in this config file. It ensures that all
code blocks are tangled to the correct file on each save. This way the config file is kept up to date and in a state that matches this file.
#+begin_src emacs-lisp
  (defun my/org-babel-tangle-config ()
    "Automatically tangle the current Org file if it is the config file.

    If the current buffer's file name matches 'my/config-filename'
    this function runs 'org-babel-tangle' without confirmation to export all
    source code blocks to their corresponding destination files.
    Intended to be used in an `after-save-hook` to keep the tangled
    configuration in sync."
    (when (and (buffer-file-name)
               (string-equal (file-truename (buffer-file-name))
                             (file-truename
  			    (expand-file-name my/config-filename))))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (defun my/add-org-tangle-config-on-save ()
    "Add buffer-local hook to tangle Org config on save."
    (when (string-equal (file-truename (buffer-file-name))
                        (file-truename (expand-file-name my/config-filename)))
      (add-hook 'after-save-hook #'my/org-babel-tangle-config nil t)))
#+end_src

In the use-package declaration we make sure that all hooks and variables are set correctly.
#+begin_src emacs-lisp
  (use-package org
    :mode ("\\.org\\'" . org-mode)
    :hook ((org-mode . org-indent-mode)
  	 (org-mode . variable-pitch-mode)
  	 (org-mode . my/org-font-setup)
  	 (org-mode . my/add-org-block-indent-save-hook)
  	 (org-mode . my/add-org-tangle-config-on-save)
  	 (org-mode . my/org-mode-electric-pair-setup))

    :bind (:map org-mode-map
  	      ("C-," . nil)
                ("C-'" . nil))
    :custom
    (org-startup-indented t)
    (org-startup-numerated t)
    (org-ellipsis " ▾")
    (org-hide-emphasis-markers t)

    (org-hide-leading-stars nil)
    (org-superstar-leading-bullet ?\s)
    (org-indent-mode-turns-on-hiding-stars nil)

    (org-log-done 'time)
    (org-log-into-drawer t)
    (org-agenda-start-with-log-mode t)
    (org-agenda-window-setup 'current-window)
    (org-agenda-start-on-weekday 1)
    (org-agenda-files (list my/org-agenda-path))

    (org-refile-targets
     '(("tasks.org" :maxlevel . 1)))
    (org-archive-location "archive.org::datetree/")

    (org-confirm-babel-evaluate nil)

    :config
    (advice-add 'org-refile :after #'org-save-all-org-buffers)

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)))

    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("nix" . "src nix")))
#+end_src

*** Org Mode Appearance
We use org-superstar to change the appearance of the leading stars in Org headlines.
#+begin_src emacs-lisp
  (use-package org-superstar
    :ensure t
    :after org
    :hook (org-mode . org-superstar-mode)

    :custom
    (org-superstar-headline-bullets-list '("◤" "◆" "■" "□"))
    (org-superstar-cycle-headline-bullets nil)
    (org-superstar-leading-fallback ?\s)

    :config
    (set-face-attribute 'org-superstar-item nil :height 1.0)
    (set-face-attribute 'org-superstar-header-bullet nil :height 1.0)
    (set-face-attribute 'org-superstar-leading nil :height 1.0))
#+end_src

*** Export
This package allows us to export org files to a large variety of different formats.
#+begin_src emacs-lisp
  (use-package ox-pandoc
    :ensure t
    :after org)
#+end_src

We can even use org-mode to create presentations. Reveal.js is a framework for
creating beautiful presentations that run i a web browser. ox-reveal allows us to export org-files as Reveal.js presentations.
#+begin_src emacs-lisp
  (use-package ox-reveal
    :ensure t
    :after org
    :custom
    (org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
    (org-reveal-title-slide nil))
#+end_src

* Development
** Default settings
This section configures the default behavior and visual appearance of programming buffers.
#+begin_src emacs-lisp
  (defun my/prog-mode-setup ()
    (setq-local truncate-lines t)
    (display-line-numbers-mode 1)
    (display-fill-column-indicator-mode 1)
    (set-face-attribute 'line-number nil
                        :background (face-background 'default))
    (set-face-attribute 'fringe nil
                        :background (face-background 'default)))

  (add-hook 'prog-mode-hook #'my/prog-mode-setup)

  (use-package corfu
    :ensure t
    :defer t
    :hook ((prog-mode . corfu-mode)
  	 (shell-mode . corfu-mode)
  	 (eshell-mode . corfu-mode))

    :custom
    (corfu-auto t)
    (corfu-auto-delay 0.1)
    (corfu-auto-prefix 1)
    (corfu-quit-no-match 'separator)
    (corfu-cycle t))

  (use-package rainbow-delimiters
    :ensure t
    :defer t
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Scratch Buffer
Here we find the configuration for the scratch buffer.
#+begin_src emacs-lisp
  (setq initial-scratch-message nil)

  (defun my/scratch-buffer-setup ()
    (setq-local truncate-lines nil)
    (setq-local fill-column 80)
    (auto-fill-mode 1)
    (corfu-mode -1))

  (add-hook 'lisp-interaction-mode-hook #'my/scratch-buffer-setup)
#+end_src

** Git
Obviously we use =magit= to manage git from within Emacs.
#+begin_src emacs-lisp
  (defun my/git-commit-setup ()
    "Set up Git commit message buffer."
    (ispell-change-dictionary "en")
    (setq-local fill-column 72)
    (setq-local display-fill-column-indicator-column 50)
    (display-fill-column-indicator-mode 1)
    (auto-fill-mode 1)
    (olivetti-mode 0)
    (display-line-numbers-mode 1))

  (use-package magit
    :ensure t
    :hook (git-commit-setup . my/git-commit-setup))
#+end_src

** Flymake
Flymake is used together with lsp-mode but first we make sure it is setup the way we like it.
#+begin_src emacs-lisp
  (defun my/flymake-theme-setup ()
    (set-face-attribute 'flymake-error nil
                        :underline nil :background "#4C3743")
    (set-face-attribute 'flymake-warning nil
                        :underline nil :background "#45443C")
    (set-face-attribute 'flymake-note nil
                        :underline nil :background "#3C4841"))

  (use-package flymake
    :defer t
    :hook (flymake-mode . my/flymake-theme-setup)
    :custom
    (flymake-indicator-type nil)
    (flymake-fringe-indicator-position nil))
#+end_src

** Language Server Protocol
We enable lsp-mode for certain programming languages and give it a minimalistic
appearance. With this config =lsp-mode= will not start automatically when opening
any files. This is done because the LSP is not always desired and it adds to the
startup time. Add a hook to the =use-package) declaration below to enable auto
start of the LSP.
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :defer t
    :commands (lsp lsp-deferred)

    :init
    (setq lsp-keymap-prefix "C-c l")

    :custom
    (lsp-completion-provider :capf)
    (lsp-lens-enable nil)
    (lsp-headerline-breadcrumb-enable nil)
    (lsp-signature-auto-activate nil)
    (lsp-signature-render-documentation nil)

    :config
    (lsp-enable-which-key-integration t))

  (use-package lsp-ivy
    :ensure t
    :after (lsp-mode ivy))
#+end_src

** Nix
Add support for .nix-files that are use to configure NixOS.
#+begin_src emacs-lisp
  (use-package nix-mode
    :ensure t
    :mode "\\.nix\\'")
#+end_src

** Python
Here we configure Python language support.
#+begin_src emacs-lisp
  (use-package lsp-pyright
    :ensure t
    :after lsp-mode
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp-deferred)))

    :custom (lsp-pyright-langserver-command "pyright"))

  (use-package pyvenv
    :ensure t
    :commands (pyvenv-activate))
#+end_src

* Custom Functions
** Duplicate Line
Here we add a function to easily duplicate the current line.
*Credit:* pesche
*Source:* [[https://stackoverflow.com/questions/88399/how-do-i-duplicate-a-whole-line-in-emacs][Stack Overflow]]
#+begin_src emacs-lisp
  (defun duplicate-line (arg)
    "Duplicate current line, leaving point in lower line."
    (interactive "*p")

    ;; save the point for undo
    (setq buffer-undo-list (cons (point) buffer-undo-list))

    ;; local variables for start and end of line
    (let ((bol (save-excursion (beginning-of-line) (point)))
          eol)
      (save-excursion

        ;; don't use forward-line for this, because you would have
        ;; to check whether you are at the end of the buffer
        (end-of-line)
        (setq eol (point))

        ;; store the line and disable the recording of undo information
        (let ((line (buffer-substring bol eol))
              (buffer-undo-list t)
              (count arg))
          ;; insert the line arg times
          (while (> count 0)
            (newline)         ;; because there is no newline in 'line'
            (insert line)
            (setq count (1- count)))
          )

        ;; create the undo information
        (setq buffer-undo-list (cons (cons eol (point)) buffer-undo-list)))
      ) ; end-of-let

    ;; put the point in the lowest line and return
    (next-line arg))
#+end_src

** Init time
We redefine the =startup-echo-area-message= function to display the time it took
to initialize Emacs on startup.
#+begin_src emacs-lisp
  (defun startup-echo-area-message ()
    (format "Init time: %s." (emacs-init-time)))
#+end_src

*  Custom key bindings
#+begin_src emacs-lisp
  (define-minor-mode na/keymap-mode
    "My custom keymap"
    :lighter " na/keymap"
    :keymap (let ((map (make-sparse-keymap)))
              (define-key map (kbd "C-c f") 'magit)
              map))
  (define-globalized-minor-mode global-na/keymap-mode na/keymap-mode
    (lambda () (na/keymap-mode 1)))
  (global-na/keymap-mode 1)

  (define-key na/keymap-mode-map (kbd "C-c g") 'magit)
  (define-key na/keymap-mode-map (kbd "C-c c") 'org-capture)
  (define-key na/keymap-mode-map (kbd "C-c C-c l") 'ispell-change-dictionary)
  (define-key na/keymap-mode-map (kbd "C-c C-c C-l") 'ispell-change-dictionary)
  (define-key na/keymap-mode-map (kbd "C-c a") 'org-agenda)
  (define-key na/keymap-mode-map (kbd "C-c d") 'duplicate-line)
  (define-key na/keymap-mode-map (kbd "C-c <left>") 'windmove-left)
  (define-key na/keymap-mode-map (kbd "C-c <right>") 'windmove-right)
  (define-key na/keymap-mode-map (kbd "C-c <up>") 'windmove-up)
  (define-key na/keymap-mode-map (kbd "C-c <down>") 'windmove-down)

  (set-register ?e (cons 'file my/config-filename))
  (set-register ?r '(buffer . "*scratch*"))
  (set-register ?t (cons 'file (format "%stasks.org" my/org-agenda-path)))
  (set-register ?m (cons 'file (format "%smeetings.org" my/org-agenda-path)))

  (when (string-equal my/config-type "personal")
    (set-register ?p (cons 'file (format "%spersonligt.org" my/org-agenda-path))))

  (when (string-equal my/config-type "work")
    (set-register ?s (cons 'file (format "%sstudents.org" my/org-agenda-path))))
#+end_src
