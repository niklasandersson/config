#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el    
* Variables
** Home directory
#+begin_src emacs-lisp
  (defvar na/home-directory
    (cond ((eq system-type 'windows-nt) (format "c:/Users/%s/" user-login-name))
          (t "~/")))
#+end_src

** From external files
#+begin_src emacs-lisp
  (load "~/.emacs.d/lisp/org_agenda_path.el")
  (load "~/.emacs.d/lisp/openai_api.el")
#+end_src
* Custom functions
** Duplicate line
#+begin_src emacs-lisp
(defun duplicate-line (arg)
  "Duplicate current line, leaving point in lower line."
  (interactive "*p")

  ;; save the point for undo
  (setq buffer-undo-list (cons (point) buffer-undo-list))

  ;; local variables for start and end of line
  (let ((bol (save-excursion (beginning-of-line) (point)))
        eol)
    (save-excursion

      ;; don't use forward-line for this, because you would have
      ;; to check whether you are at the end of the buffer
      (end-of-line)
      (setq eol (point))

      ;; store the line and disable the recording of undo information
      (let ((line (buffer-substring bol eol))
            (buffer-undo-list t)
            (count arg))
        ;; insert the line arg times
        (while (> count 0)
          (newline)         ;; because there is no newline in 'line'
          (insert line)
          (setq count (1- count)))
        )

      ;; create the undo information
      (setq buffer-undo-list (cons (cons eol (point)) buffer-undo-list)))
    ) ; end-of-let

  ;; put the point in the lowest line and return
  (next-line arg))
#+end_src
* Development
** LSP-mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "C-l")
    :hook (
           (rust-mode . lsp)
           (python-mode . lsp)
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  (use-package lsp-ui)
#+end_src
** Rust
#+begin_src emacs-lisp
(use-package rustic)
#+end_src
** Python
#+begin_src emacs-lisp
  (use-package pyvenv)

  (use-package lsp-pyright
    :ensure t
    :custom (lsp-pyright-langserver-command "pyright") ;; or basedpyright
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp))))  ; or lsp-deferred
#+end_src
* Packages
** Initialize packages and package archives
Add all archives and make sure use-package is enabled.
#+begin_src emacs-lisp
    (require 'package)

    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                             ("org" . "https://orgmode.org/elpa/")
                             ("elpa" . "https://elpa.gnu.org/packages/")
                               ( "jcs-elpa" . "https://jcs-emacs.github.io/jcs-elpa/packages/")
                               ("nongnu" . "https://elpa.nongnu.org/nongnu/")))

    (package-initialize)
    (unless package-archive-contents
      (package-refresh-contents))

    (unless (package-installed-p 'use-package)
       (package-install 'use-package))

    (require 'use-package)
    (setq use-package-always-ensure t)
#+end_src

#+RESULTS:
: t

** Ivy and counsel
#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))


  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :config
    (setq ivy-initial-inputs-alist nil))

  (use-package ivy-rich
  :init
  (ivy-rich-mode 1))

  (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)  
#+end_src
** Which-key
Which-key is likely soon going to be added as standard to Emacs.  
#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))
#+end_src
** Rainbow-delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** Doom-modeline
All the icon is used for doom-modeline. On first time install run M-x all-the-icons-install-fonts and M-x nerd-icons-install-fonts. 
#+begin_src emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p))

;; Setup doom-modeline
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))

(display-time)
(setq display-time-24hr-format t)
#+end_src
** Helpful
#+begin_src emacs-lisp
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src
** Projectile
#+begin_src emacs-lisp

   (defvar na/project-directory (format "%sProjects/" na/home-directory))
  na/project-directory
  
  (use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  (setq projectile-project-search-path (list na/project-directory)))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))
#+end_src
** Magit
#+begin_src emacs-lisp
  (use-package magit)

  (defun na/setup-commit-message ()
    (ispell-change-dictionary "en")
    (setq fill-column 70)
    (setq display-fill-column-indicator-column 64))

  (add-hook 'git-commit-setup-hook 'na/setup-commit-message)
#+end_src
** gptel
#+begin_src emacs-lisp
  (use-package gptel
    :custom (gptel-api-key na/openai-api-key))

  (add-to-list 'load-path "~/.emacs.d/lisp/")
  (require 'gptel-extensions)
#+end_src
** ox-pandoc
*** Dependencies
**** Pandoc
#+begin_src emacs-lisp
(use-package ox-pandoc)
#+end_src
** org-reveal
org-reveal-root is set to pull Reveal.JS from CDN so no install is required.
#+begin_src emacs-lisp
  (use-package ox-reveal)
  (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
  (setq org-reveal-title-slide nil)
#+end_src
** visual-fill-column-mode
#+begin_src emacs-lisp
  (setq-default fill-column 100)
  (use-package visual-fill-column
    :hook ((prog-mode . visual-line-fill-column-mode)
           (text-mode . visual-line-fill-column-mode)))

  (setq-default display-fill-column-indicator-column 94)
  (set-face-attribute 'fill-column-indicator nil)
  (global-display-fill-column-indicator-mode t)
#+end_src
** Company-mode
#+begin_src emacs-lisp
  (use-package company
    :config
    (setq company-minimum-prefix-length 1)
    (setq company-idle-delay 0.0))
#+end_src
* Basic GUI configuration
** The basics
Remove all unwanted GUI Elements.
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
  
  (setq visible-bell t)
  (setq ring-bell-function 'ignore) 
#+end_src

** Setup line numbers
Enable line numbers globally but disable for certain modes. 
#+begin_src emacs-lisp
  (set-fringe-mode 10)

  (column-number-mode)
  (setq display-line-numbers-type 'relative)
  (setq-default display-line-numbers-width 4)
  (global-display-line-numbers-mode t)
#+end_src

** Theme settings
#+begin_src emacs-lisp
  (use-package gruvbox-theme)
  (load-theme 'gruvbox-dark-soft t)
  (set-face-attribute 'line-number nil
                      :background (face-background 'default))
  (set-face-attribute 'fringe nil
                      :background (face-background 'default))
#+end_src


** Font settings
Set default fonts as well as fonts for fixed pitch and variable pitch.

#+begin_src emacs-lisp
  (defvar na/default-font-size 120)
  (defvar na/default-font-size-variable-pitch 125)

  (set-face-attribute 'default nil :family "mononoki" :height na/default-font-size)
  (set-face-attribute 'fixed-pitch nil :family "mononoki" :height na/default-font-size)
  (set-face-attribute 'variable-pitch nil :family "Spectral" :height na/default-font-size-variable-pitch)

#+end_src

** Calendar
#+begin_src emacs-lisp
  (setq calendar-week-start-day 1)
  (setq window-combination-resize t
        split-width-threshold 300)

  (copy-face font-lock-constant-face 'calendar-iso-week-face)
  (set-face-attribute 'calendar-iso-week-face nil
                      :height 0.7)
  (setq calendar-intermonth-text
        '(propertize
          (format "%2d"
                  (car
                   (calendar-iso-from-absolute
                    (calendar-absolute-from-gregorian (list month day year)))))
          'font-lock-face 'calendar-iso-week-face))

  (copy-face 'default 'calendar-iso-week-header-face)
  (set-face-attribute 'calendar-iso-week-header-face nil
                      :height 0.7)
  (setq calendar-intermonth-header
        (propertize "Wk"               
                    'font-lock-face 'calendar-iso-week-header-face))
#+end_src
* Org-mode
** Setup org-mode
*** Org-mode setup
#+begin_src emacs-lisp
  (defun na/org-mode-setup ()
    (setq org-ellipsis " â–¾")
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-refile-targets
          '(("archive.org" :maxlevel . 1)
            ("task.org" :maxlevel . 1)
            ("students.org" :maxlevel . 1)))

    (advice-add 'org-refile :after 'org-save-all-org-buffers))
#+end_src
*** Org-mode hook
#+begin_src emacs-lisp
  (defun na/org-mode-hook ()
    (org-indent-mode)
    (variable-pitch-mode 1))
#+end_src

*** Org-mode font setup
#+begin_src emacs-lisp
      (defun na/org-font-setup ()
        (dolist (face '((org-level-1 . 1.2)
                        (org-level-2 . 1.1)
                        (org-level-3 . 1.0)
                        (org-level-4 . 1.0)
                        (org-level-5 . 1.0)
                        (org-level-6 . 1.0)
                        (org-level-7 . 1.0)
                        (org-level-8 . 1.0)))
          (set-face-attribute (car face) nil
                              :family "Spectral"
                              :weight 'bold
                              :box nil
                              :height (cdr face)
                              :foreground "#99cc99"))

        (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
        (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
        (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
        (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
        (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
        (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
        (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
        (set-face-attribute 'org-block-begin-line nil :inherit 'fixed-pitch :underline nil :foreground nil :extend t :box nil :background nil)
        (set-face-attribute 'org-block-end-line nil :inherit 'fixed-pitch :underline nil :foreground nil :extend t :box nil :background nil)
        (set-face-attribute 'org-headline-done nil
                        :foreground "#7c6f64")
        (set-face-attribute 'org-done nil
                      :foreground "#7c6f64"))
#+end_src

*** Org-mode agenda setup
#+begin_src emacs-lisp
  (defun na/org-agenda-setup ()
    (setq org-agenda-start-with-log-mode t)
    (setq org-agenda-window-setup 'current-window)
    (setq org-agenda-files (list na/org-agenda-path))
    (setq org-agenda-start-on-weekday 1))
#+end_src

*** Load org-mode
#+begin_src emacs-lisp
  (use-package org
    :hook (org-mode . na/org-mode-hook)
    :config
    (na/org-mode-setup)
    (na/org-font-setup)
    (na/org-agenda-setup))
#+end_src

** Org-superstar
#+begin_src emacs-lisp
  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode))

  (with-eval-after-load 'org-superstar
    (set-face-attribute 'org-superstar-item nil :height 1.0)
    (set-face-attribute 'org-superstar-header-bullet nil :height 1.0)
    (set-face-attribute 'org-superstar-leading nil :height 1.0))

  (setq org-superstar-headline-bullets-list
        '("â—¤" ("â€¢") "-"))

  (setq org-superstar-cycle-headline-bullets nil)

  (setq org-superstar-leading-fallback ?\s)

  (setq org-hide-leading-stars nil)
  (setq org-superstar-leading-bullet ?\s)
  (setq org-indent-mode-turns-on-hiding-stars nil)

#+end_src
** Org-babel
#+begin_src emacs-lisp
(org-babel-do-load-languages
  'org-babel-load-languages
  '((emacs-lisp . t)
    (python . t)))

(setq org-confirm-babel-evaluate nil)

(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
#+end_src

** Jupyter export
Enables export from org-mode to Jupyter. Package need to be manually downloaded from https://github.com/zaeph/ox-ipynb.  
#+begin_src emacs-lisp
  (use-package ox-ipynb
    :load-path "~/.emacs.d/lisp/")
#+end_src

** Org-download
#+begin_src emacs-lisp
  (use-package org-download)
#+end_src

** Auto-tangle config on save
Enable org mode to automatically write source blocks to the correct config file on save.
#+begin_src emacs-lisp
  (defvar na/config-filename
    (format "%sProjects/Emacs-Configuration/emacs.org" na/home-directory))

  (defun na/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name na/config-filename))
           ;; Dynamic scoping to the rescue
           (let ((org-confirm-babel-evaluate nil))
             (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'na/org-babel-tangle-config)))
#+end_src
* Behavior settings
** Locale and character encoding
#+begin_src emacs-lisp
  (set-language-environment 'utf-8)
  (setq locale-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-selection-coding-system
   (if (eq system-type 'windows-nt)
       'utf-16-le 
     'utf-8))
  (prefer-coding-system 'utf-8)

  (setq system-time-locale "C")
#+end_src
** Default folder
#+begin_src emacs-lisp
 (cd na/home-directory)
#+end_src
** Text handling
#+begin_src emacs-lisp
(delete-selection-mode 1)
#+end_src
** Spell-checking
#+begin_src emacs-lisp
  (when (string-equal system-type "windows-nt")
    (setq ispell-program-name "C:\\msys64\\usr\\bin\\aspell")
    (setq ispell-aspell-data-dir "C:\\msys64\\usr\\lib\\aspell-0.60\\")
    (setq ispell-aspell-dict-dir "C:\\msys64\\usr\\lib\\aspell-0.60\\"))

  (setq ispell-local-dictionary "sv")

  (use-package flyspell
    :ensure t
    :init
    (add-hook 'org-mode-hook
              (lambda () (flyspell-mode 1)))
    (add-hook 'git-commit-setup-hook 'git-commit-turn-on-flyspell))
#+end_src

*** Setup for Windows
1. Install MSYS2 from https://www.msys2.org/ .
2. Install package aspell and make using commands  "pacman -S aspell" and "pacman -S make"
3. Downloads dictionaries from https://ftp.gnu.org/gnu/aspell/dict/0index.html#0.60
4. Unpack dictionaries to a folder in MSYS2.
5. Browse to folder and run "./configure", "make" and "make install"

** Remove whitespaces
#+begin_src emacs-lisp
(add-hook 'before-save-hook #'delete-trailing-whitespace nil t)
#+end_src
** Auto-complete brackets
#+begin_src emacs-lisp
(electric-pair-mode 1)
(add-hook 'org-mode-hook (lambda ()
           (setq-local electric-pair-inhibit-predicate
                   `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))

(show-paren-mode 1)
#+end_src

** Backup files
#+begin_src emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+end_src
** Set custom file
#+begin_src emacs-lisp
(setq custom-file "~/.emacs.d/emacs-custom.el")
(load custom-file)
#+end_src
** Custom keybindings
#+begin_src emacs-lisp
  (define-minor-mode na/keymap-mode
    "My custom keymap"
    :lighter " na/keymap"
    :keymap (let ((map (make-sparse-keymap)))
              (define-key map (kbd "C-c f") 'magit)
              map))
  (define-globalized-minor-mode global-na/keymap-mode na/keymap-mode
    (lambda () (na/keymap-mode 1)))
  (global-na/keymap-mode 1)

  (define-key na/keymap-mode-map (kbd "C-c g") 'magit)
  (define-key na/keymap-mode-map (kbd "C-c s") 'flyspell-check-previous-highlighted-word)
  (define-key na/keymap-mode-map (kbd "C-c c") 'gptel)
  (define-key na/keymap-mode-map (kbd "C-c l") 'ispell-change-dictionary)
  (define-key na/keymap-mode-map (kbd "C-c a") 'org-agenda)
  (define-key na/keymap-mode-map (kbd "C-c d") 'duplicate-line)
  (define-key na/keymap-mode-map (kbd "C-c <left>") 'windmove-left)
  (define-key na/keymap-mode-map (kbd "C-c <right>") 'windmove-right)
  (define-key na/keymap-mode-map (kbd "C-c <up>") 'windmove-up)
  (define-key na/keymap-mode-map (kbd "C-c <down>") 'windmove-down)
#+end_src
** Stored registers
#+begin_src emacs-lisp
  (set-register ?e (cons 'file (format "%sEmacs-Configuration/emacs.org" na/project-directory)))
  (set-register ?w (cons 'file (format "%swork.org" na/org-agenda-path)))
  (set-register ?s '(buffer . "*scratch*"))
#+end_src
